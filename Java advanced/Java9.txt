Dentro da função eu posso gerar quantos códigos que eu quiser
Tudo que estiver dentro da função, pertence a função
Os parâmetros vem dentro do parênteses, pra você não ter que chamar um nome toda vida
Forma mais comum vista no curso de criar function (req,res) {}
A forma mais orientada é (req, res) => {};

function saudacao(nome) {
    console.log(`Bom dia ${nome}`);
};

saudacao('Luiz');
saudacao('Maria');

Vai reutilizar a função quantas vezes quiser
Quando uma variavel não tem um nome definido, você utiliza return 123456;
E o que vai ser apresentado na variável vai ser o 123456
Return
return `Bom dia ${nome}!`;

fuction soma(x,y) {
	const resultado = x + y;
	return resultado;
}

console.log(soma(2, 2));
function soma(x, y){
    const resultado = x + y;
    return resultado;
};

console.log(soma(2, 2));
console.log(soma(2, 4));
console.log(soma(2, 8));
O programa é composto por funções que executam várias coisas
Exibir um valor na tela, exibir um valor, conectar numa base de dados

const raiz = function (n) {
    return n ** 0.5;
};

console.log(raiz(9));

função arrow function =>
const raiz = n => n ** 0.5;
const raiz = n => n **0.5;
console.log(raiz(9));
console.log(raiz(16));
console.log(raiz(25));

Tudo isso citado cria funções que podem ser repetidas inúmeras vezes, alterando apenas os elementos dentro da função
